# по количеству ядер, для нас auto
worker_processes auto;
# error log включен в режиме debug для отладки, потом включить crit
error_log /var/log/nginx/error.log debug;
pid /run/nginx.pid;
include /usr/share/nginx/modules/*.conf;


events {
    worker_connections 1024;
}

http {
# кеширование запросов
    proxy_cache_path cache/  keys_zone=auth_cache:10m;
# немного оптимизации, пока не включаю, непонтяно как поведет себя с Dash
# если клиент не читает ответ, сбрасывать соединение
#	reset_timedout_connection on;
# будет ждать 10 секунд тело запроса от клиента, после чего сбросит соединение
#	client_body_timeout 10;
# если клиент прекратит чтение ответа, Nginx подождет 2 секунды и сбросит соединение
#	send_timeout 2;
# сжатие - будем тестить на развернутом Dash
#    gzip                on;
#    gzip_min_length     1000;
#    gzip_proxied        expired no-cache no-store private auth;
#    gzip_types          text/plain text/css text/javascript application/javascript application/x-javascript text/xml application/xml application/xml+rss application/json;
#    gzip_disable        "msie6";
	
    upstream backend {
# dash запущен вне докера, поэтому  применяется адрес проброса
        server host.docker.internal:8000;
		
    }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    server {
# отключил http порт
#		listen 8080;
# включил 8443 порт и подмешал ssl
        listen 8443 ssl;
# когда появится ДНС имя, объявим в директиву ниже
#		server_name dash_ssl_etc;
# обращаюсь к самоподписанным сертификатам (идет в составе образа)
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
# путь до корневого сертификата, если потребуется
#		ssl_trusted_certificate /etc/nginx/ssl/root.crt;
# таймаут ssl сессии, пока 1 день
		ssl_session_timeout 1d;
# таймаут кеша ssl, пока 1 час
		ssl_session_cache   shared:SSL:60m;
# указываем поддержтваемые протоколы
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
# фиксируем кодировки
		charset utf-8;

		

       location / {
            auth_request /auth-proxy;
            error_page 401 /login;
            proxy_pass http://backend/;
            # time answer
            proxy_connect_timeout 90s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
# 2 заголовка для информативости
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /login {
            proxy_pass http://backend/login;
            proxy_set_header X-Target $request_uri;
        }

        location = /auth-proxy {
                internal;
                proxy_pass http://192.168.155.241:8888;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
# кеширование запросов аутентификации
                proxy_cache auth_cache;
# время жизни кеша
                proxy_cache_valid 200 10m;
                proxy_cache_key "$http_authorization$cookie_nginxauth";
                proxy_set_header X-Ldap-URL "ldap://192.168.155.241:389 ";
#               proxy_set_header X-Ldap-Starttls "true";
                proxy_set_header X-Ldap-BaseDN "ou=users,dc=example,dc=org";
                proxy_set_header X-Ldap-BindDN "cn=admin,dc=example,dc=org";
                proxy_set_header X-Ldap-BindPass "admin";
#               proxy_set_header X-CookieName "nginxauth";
#               proxy_set_header Cookie nginxauth=$cookie_nginxauth;
#               proxy_set_header X-Ldap-Template "(sAMAccountName=%(username)s)";
                #proxy_set_header X-Ldap-Realm "Restricted";
}
    }
}
